// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: rooms/rooms.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoomsService_PingPong_FullMethodName       = "/proto.RoomsService/PingPong"
	RoomsService_ListenForRooms_FullMethodName = "/proto.RoomsService/ListenForRooms"
	RoomsService_CreateRoom_FullMethodName     = "/proto.RoomsService/CreateRoom"
	RoomsService_JoinRoom_FullMethodName       = "/proto.RoomsService/JoinRoom"
)

// RoomsServiceClient is the client API for RoomsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomsServiceClient interface {
	PingPong(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Ping, Pong], error)
	ListenForRooms(ctx context.Context, in *ListenForRoomsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NewRoomNotification], error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	JoinRoom(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RoomMethod, RoomMethod], error)
}

type roomsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsServiceClient(cc grpc.ClientConnInterface) RoomsServiceClient {
	return &roomsServiceClient{cc}
}

func (c *roomsServiceClient) PingPong(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Ping, Pong], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RoomsService_ServiceDesc.Streams[0], RoomsService_PingPong_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Ping, Pong]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomsService_PingPongClient = grpc.BidiStreamingClient[Ping, Pong]

func (c *roomsServiceClient) ListenForRooms(ctx context.Context, in *ListenForRoomsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NewRoomNotification], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RoomsService_ServiceDesc.Streams[1], RoomsService_ListenForRooms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenForRoomsRequest, NewRoomNotification]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomsService_ListenForRoomsClient = grpc.ServerStreamingClient[NewRoomNotification]

func (c *roomsServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, RoomsService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsServiceClient) JoinRoom(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RoomMethod, RoomMethod], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RoomsService_ServiceDesc.Streams[2], RoomsService_JoinRoom_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RoomMethod, RoomMethod]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomsService_JoinRoomClient = grpc.BidiStreamingClient[RoomMethod, RoomMethod]

// RoomsServiceServer is the server API for RoomsService service.
// All implementations must embed UnimplementedRoomsServiceServer
// for forward compatibility.
type RoomsServiceServer interface {
	PingPong(grpc.BidiStreamingServer[Ping, Pong]) error
	ListenForRooms(*ListenForRoomsRequest, grpc.ServerStreamingServer[NewRoomNotification]) error
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	JoinRoom(grpc.BidiStreamingServer[RoomMethod, RoomMethod]) error
	mustEmbedUnimplementedRoomsServiceServer()
}

// UnimplementedRoomsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomsServiceServer struct{}

func (UnimplementedRoomsServiceServer) PingPong(grpc.BidiStreamingServer[Ping, Pong]) error {
	return status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedRoomsServiceServer) ListenForRooms(*ListenForRoomsRequest, grpc.ServerStreamingServer[NewRoomNotification]) error {
	return status.Errorf(codes.Unimplemented, "method ListenForRooms not implemented")
}
func (UnimplementedRoomsServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomsServiceServer) JoinRoom(grpc.BidiStreamingServer[RoomMethod, RoomMethod]) error {
	return status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedRoomsServiceServer) mustEmbedUnimplementedRoomsServiceServer() {}
func (UnimplementedRoomsServiceServer) testEmbeddedByValue()                      {}

// UnsafeRoomsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServiceServer will
// result in compilation errors.
type UnsafeRoomsServiceServer interface {
	mustEmbedUnimplementedRoomsServiceServer()
}

func RegisterRoomsServiceServer(s grpc.ServiceRegistrar, srv RoomsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoomsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoomsService_ServiceDesc, srv)
}

func _RoomsService_PingPong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomsServiceServer).PingPong(&grpc.GenericServerStream[Ping, Pong]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomsService_PingPongServer = grpc.BidiStreamingServer[Ping, Pong]

func _RoomsService_ListenForRooms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenForRoomsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomsServiceServer).ListenForRooms(m, &grpc.GenericServerStream[ListenForRoomsRequest, NewRoomNotification]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomsService_ListenForRoomsServer = grpc.ServerStreamingServer[NewRoomNotification]

func _RoomsService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomsService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomsService_JoinRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomsServiceServer).JoinRoom(&grpc.GenericServerStream[RoomMethod, RoomMethod]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomsService_JoinRoomServer = grpc.BidiStreamingServer[RoomMethod, RoomMethod]

// RoomsService_ServiceDesc is the grpc.ServiceDesc for RoomsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoomsService",
	HandlerType: (*RoomsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomsService_CreateRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingPong",
			Handler:       _RoomsService_PingPong_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListenForRooms",
			Handler:       _RoomsService_ListenForRooms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinRoom",
			Handler:       _RoomsService_JoinRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rooms/rooms.proto",
}
